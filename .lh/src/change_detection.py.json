{
    "sourceFile": "src/change_detection.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759087884283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759088062035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n import numpy as np\r\n from skimage.filters import threshold_otsu\r\n from skimage.morphology import remove_small_objects, remove_small_holes\r\n import os\r\n+from shapely.geometry import shape\r\n \r\n-\r\n def detect_changes(before_path, after_path, output_dir):\r\n     \"\"\"\r\n     Виявляє зміни між двома геопросторовими зображеннями.\r\n \r\n@@ -70,9 +70,9 @@\n     # Перетворюємо растрову маску на векторні полігони\r\n     mask_shapes = shapes(final_mask, mask=(final_mask > 0), transform=before_src.transform)\r\n     \r\n     # Створюємо GeoDataFrame з отриманих полігонів\r\n-    geometries = [shape for shape, value in mask_shapes]\r\n+    geometries = [shape(geom) for geom, value in mask_shapes]\r\n     gdf = gpd.GeoDataFrame(geometry=geometries, crs=before_src.crs)\r\n     \r\n     # Зберігаємо векторний файл\r\n     geojson_path = os.path.join(output_dir, \"changes_polygons.geojson\")\r\n"
                }
            ],
            "date": 1759087884283,
            "name": "Commit-0",
            "content": "import rasterio\r\nfrom rasterio.features import shapes\r\nimport geopandas as gpd\r\nimport numpy as np\r\nfrom skimage.filters import threshold_otsu\r\nfrom skimage.morphology import remove_small_objects, remove_small_holes\r\nimport os\r\n\r\n\r\ndef detect_changes(before_path, after_path, output_dir):\r\n    \"\"\"\r\n    Виявляє зміни між двома геопросторовими зображеннями.\r\n\r\n    Args:\r\n        before_path (str): Шлях до зображення \"до\".\r\n        after_path (str): Шлях до зображення \"після\".\r\n        output_dir (str): Папка для збереження результатів.\r\n    \"\"\"\r\n    print(\"Процес розпочато...\")\r\n\r\n    # Крок 1: Відкриття зображень та читання метаданих\r\n    with rasterio.open(before_path) as before_src, rasterio.open(after_path) as after_src:\r\n        # Перевірка, чи збігаються системи координат та розміри\r\n        if before_src.crs != after_src.crs or before_src.shape != after_src.shape:\r\n            raise ValueError(\"Зображення мають різні розміри або системи координат. Потрібна попередня обробка.\")\r\n\r\n        # Читаємо зображення як масиви NumPy\r\n        before_img = before_src.read(1).astype('float32')\r\n        after_img = after_src.read(1).astype('float32')\r\n        \r\n        # Зберігаємо метадані для запису результату\r\n        profile = before_src.profile\r\n        profile.update(dtype=rasterio.uint8, count=1)\r\n\r\n    print(\"Зображення успішно завантажено.\")\r\n\r\n    # Крок 2: Розрахунок різниці між зображеннями\r\n    # Використовуємо абсолютну різницю, щоб знайти місця змін\r\n    diff_img = np.abs(after_img - before_img)\r\n\r\n    # Нормалізуємо різницю до діапазону 0-255 для візуалізації та аналізу\r\n    diff_normalized = ((diff_img - diff_img.min()) / (diff_img.max() - diff_img.min()) * 255).astype(np.uint8)\r\n\r\n    # Крок 3: Визначення порогу для виділення значних змін\r\n    # Використовуємо метод Оцу для автоматичного визначення порогу\r\n    thresh = threshold_otsu(diff_normalized)\r\n    binary_mask = diff_normalized > thresh\r\n    \r\n    print(f\"Автоматично визначений поріг для змін: {thresh}\")\r\n\r\n    # Крок 4: Очищення маски від шуму\r\n    # Видаляємо малі об'єкти (шум)\r\n    cleaned_mask = remove_small_objects(binary_mask, min_size=500) # min_size можна налаштувати\r\n    # Заповнюємо невеликі \"дірки\" в об'єктах\r\n    cleaned_mask = remove_small_holes(cleaned_mask, area_threshold=250)\r\n    \r\n    # Перетворюємо булеву маску в цілочисельний формат (0 або 255)\r\n    final_mask = cleaned_mask.astype(np.uint8) * 255\r\n    \r\n    print(\"Маска змін створена та очищена від шуму.\")\r\n\r\n    # Крок 5: Збереження растрової маски змін\r\n    mask_path = os.path.join(output_dir, \"changes_mask.tif\")\r\n    with rasterio.open(mask_path, 'w', **profile) as dst:\r\n        dst.write(final_mask, 1)\r\n    \r\n    print(f\"Растрова маска змін збережена у файл: {mask_path}\")\r\n\r\n    # Крок 6: Векторизація результатів\r\n    # Перетворюємо растрову маску на векторні полігони\r\n    mask_shapes = shapes(final_mask, mask=(final_mask > 0), transform=before_src.transform)\r\n    \r\n    # Створюємо GeoDataFrame з отриманих полігонів\r\n    geometries = [shape for shape, value in mask_shapes]\r\n    gdf = gpd.GeoDataFrame(geometry=geometries, crs=before_src.crs)\r\n    \r\n    # Зберігаємо векторний файл\r\n    geojson_path = os.path.join(output_dir, \"changes_polygons.geojson\")\r\n    gdf.to_file(geojson_path, driver='GeoJSON')\r\n    \r\n    print(f\"Векторні полігони змін збережено у файл: {geojson_path}\")\r\n    print(\"Процес успішно завершено!\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Визначення шляхів до файлів\r\n    # Скрипт очікує, що він знаходиться в папці src/, а дані - в data/\r\n    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n    DATA_DIR = os.path.join(BASE_DIR, 'data')\r\n    OUTPUT_DIR = os.path.join(BASE_DIR, 'output')\r\n\r\n    # Створення папки для результатів, якщо її не існує\r\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\r\n\r\n    # Шляхи до вхідних зображень\r\n    before_image_path = os.path.join(DATA_DIR, 'before.tif')\r\n    after_image_path = os.path.join(DATA_DIR, 'after.tif')\r\n    \r\n    # Перевірка наявності файлів\r\n    if not os.path.exists(before_image_path) or not os.path.exists(after_image_path):\r\n        print(\"Помилка: Переконайтеся, що файли 'before.tif' та 'after.tif' знаходяться в папці 'data'.\")\r\n    else:\r\n        detect_changes(before_image_path, after_image_path, OUTPUT_DIR)"
        }
    ]
}